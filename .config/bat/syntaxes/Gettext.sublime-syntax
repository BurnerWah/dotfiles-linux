%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
# extracted from https://github.com/textmate/gettext.tmbundle
name: Gettext
comment: |
  TODO:  Command for copy original to untranslated, label as fuzzy, remove fuzzy, next fuzzy etc
  Create meta scope for each entry
file_extensions:
  - po
  - pot
  - potx
scope: source.po
contexts:
  main:
    - match: '^(?=(msgid(_plural)?|msgctxt)\s*"[^"])|^\s*$'
      comment: Start of body of document, after header
      push:
        - match: \z
          pop: true
        - include: body
    - include: comments
    - match: ^msg(id|str)\s+""\s*$\n?
      scope: comment.line.number-sign.po
    - match: '^"(?:([^\s:]+)(:)\s+)?([^"]*)"\s*$\n?'
      scope: meta.header.po
      captures:
        1: constant.language.po
        2: punctuation.separator.key-value.po
        3: string.other.po
  body:
    - match: ^(msgid(_plural)?)\s+
      captures:
        1: keyword.control.msgid.po
      push:
        - meta_scope: meta.scope.msgid.po
        - match: ^(?!")
          pop: true
        - match: (\G|^)"
          push:
            - meta_scope: string.quoted.double.po
            - match: '"'
              pop: true
            - match: '\\[\\"]'
              scope: constant.character.escape.po
    - match: '^(msgstr)(?:(\[)(\d+)(\]))?\s+'
      captures:
        1: keyword.control.msgstr.po
        2: keyword.control.msgstr.po
        3: constant.numeric.po
        4: keyword.control.msgstr.po
      push:
        - meta_scope: meta.scope.msgstr.po
        - match: ^(?!")
          pop: true
        - match: (\G|^)"
          push:
            - meta_scope: string.quoted.double.po
            - match: '"'
              pop: true
            - match: '\\[\\"]'
              scope: constant.character.escape.po
    - match: '^(msgctxt)(?:(\[)(\d+)(\]))?\s+'
      captures:
        1: keyword.control.msgctxt.po
        2: keyword.control.msgctxt.po
        3: constant.numeric.po
        4: keyword.control.msgctxt.po
      push:
        - meta_scope: meta.scope.msgctxt.po
        - match: ^(?!")
          pop: true
        - match: (\G|^)"
          push:
            - meta_scope: string.quoted.double.po
            - match: '"'
              pop: true
            - match: '\\[\\"]'
              scope: constant.character.escape.po
    - match: ^(#~).*$\n?
      scope: comment.line.number-sign.obsolete.po
      captures:
        1: punctuation.definition.comment.po
    - include: comments
    - match: '^(?!\s*$)[^#"].*$\n?'
      comment: 'a line that does not begin with # or ". Could improve this regexp'
      scope: invalid.illegal.po
  comments:
    - match: ^(?=#)
      push:
        - match: (?!\G)
          pop: true
        - match: (#,)\s+
          captures:
            1: punctuation.definition.comment.po
          push:
            - meta_scope: comment.line.number-sign.flag.po
            - match: \n
              pop: true
            - match: (?:\G|,\s*)((?:fuzzy)|(?:no-)?(?:c|objc|sh|lisp|elisp|librep|scheme|smalltalk|java|csharp|awk|object-pascal|ycp|tcl|perl|perl-brace|php|gcc-internal|qt|boost)-format)
              captures:
                1: entity.name.type.flag.po
        - match: '#\.'
          captures:
            0: punctuation.definition.comment.po
          push:
            - meta_scope: comment.line.number-sign.extracted.po
            - match: \n
              pop: true
        - match: '(#:)[ \t]*'
          captures:
            1: punctuation.definition.comment.po
          push:
            - meta_scope: comment.line.number-sign.reference.po
            - match: \n
              pop: true
            - match: '(\S+:)([\d;]*)'
              scope: storage.type.class.po
        - match: '#\|'
          captures:
            0: punctuation.definition.comment.po
          push:
            - meta_scope: comment.line.number-sign.previous.po
            - match: \n
              pop: true
        - match: '#'
          captures:
            0: punctuation.definition.comment.po
          push:
            - meta_scope: comment.line.number-sign.po
            - match: \n
              pop: true
