{
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
      "rootPatterns": [".ccls", ".ccls-root", "compile_commands.json", ".git/"],
      "initializationOptions": {
        "cache": { "directory": ".ccls-cache" },
        "clang": { "resourceDir": "/usr/lib64/clang/11" },
        "highlight": { "lsRanges": true }
      }
    },
    "cmake": {
      "command": "cmake-language-server",
      "filetypes": ["cmake"],
      "rootPatterns": ["build/"],
      "initializationOptions": { "buildDirectory": "build" }
    },
    "dotls": {
      "command": "dot-language-server",
      "args": ["--stdio"],
      "filetypes": ["dot"]
    },
    "efm": {
      "command": "efm-langserver",
      "filetypes": ["eruby"]
    },
    "fortls": {
      "command": "fortls",
      "filetypes": ["fortran"],
      "rootPatterns": [".fortls", ".git/"]
    },
    "gopls": {
      "command": "gopls",
      "filetypes": ["go"],
      "rootPatterns": ["go.mod", "Gopkg.toml"],
      "disableWorkspaceFolders": true,
      "initializationOptions": { "usePlaceholders": true }
    },
    "sumneko_lua": { "command": "lua-language-server", "filetypes": ["lua"] }
    // "lua": { "command": "lua-lsp", "filetypes": ["lua"] }
  },
  "coc.preferences.extensionUpdateCheck": "never",
  "coc.preferences.formatOnSaveFiletypes": [
    "css",
    "html",
    "javascript",
    "json",
    "sh",
    "typescript",
    "yaml"
  ],
  "coc.preferences.hoverTarget": "float",
  "diagnostic.filetypeMap": { "markdown": "vimwiki" },
  "diagnostic-languageserver.linters": {
    /*
     * The following programs don't return exit code 0 after linting:
     * checkmake, luacheck, rstcheck.
     * Without changes to diagnostic-ls, they aren't usable.
     *
     * bash/zsh have errors that end up after the file so they're left to ALE.
     */
    "fish": {
      "sourceName": "fish",
      "command": "fish",
      "args": ["-n", "%tempfile"], // using %tempfile lets us lint w/o saving the file
      "isStdout": false,
      "isStderr": true,
      "formatLines": 1,
      "formatPattern": [
        "^.*\\(line (\\d+)\\): (.*)$",
        { "line": 1, "message": 2 }
      ]
    },
    "rst-lint": {
      "sourceName": "rst-lint",
      "command": "rst-lint",
      "args": ["--format", "json", "%file"],
      "parseJson": {
        "line": "line",
        "endLine": "line",
        "security": "level",
        "message": "${message}"
      },
      "securities": { "1": "info", "2": "warning", "3": "error", "4": "error" }
    }
  },
  "diagnostic-languageserver.filetypes": {
    "asciidoc": ["languagetool", "write-good"],
    "bats": "shellcheck",
    "c": "cpplint",
    "cpp": "cpplint",
    "css": "stylelint",
    "dockerfile": "hadolint",
    "Dockerfile": "hadolint",
    "elixir": "mix_credo",
    "fish": "fish",
    // go - golangci-lint, revive disabled by default
    "graphql": "eslint",
    // haskell - hlint not available in coc-diagnostic
    // help - all linters disabled by default
    "html": ["tidy", "write-good"],
    "javascript": ["eslint", "standard"],
    "less": "stylelint",
    "mail": "languagetool",
    "markdown": ["languagetool", "write-good"],
    "nroff": "write-good",
    "php": ["phpcs", "phpstan", "psalm"],
    "po": "write-good",
    "pod": "write-good",
    // python - pylint, mypy not available in coc-diagnostic
    "rst": ["rst-lint", "write-good"],
    "sass": "stylelint",
    "scss": "stylelint",
    "sh": "shellcheck",
    "stylus": "stylelint",
    "sugarss": "stylelint",
    "tex": "write-good",
    "texinfo": "write-good",
    "text": "languagetool", // write-good is disabled by default in ALE
    "typescript": ["eslint", "standard"],
    "vim": "vint",
    "xhtml": "write-good",
    "yaml": "yamllint"
  },
  "diagnostic-languageserver.formatters": {
    // shfmt has annoying defaults so we override them
    "shfmt": { "command": "shfmt", "args": ["-i=2", "-ci"] }
  },
  "diagnostic-languageserver.formatFiletypes": {
    // fish_indent has issues, don't use it.
    "dart": "dartfmt",
    "elixir": "mix_format",
    "lua": "lua-format",
    "sh": "shfmt"
  },
  "highlight.colors.enable": false, // We have another plugin set up to handle this
  "json.schemas": [
    /*
     * https://schemastore.azurewebsites.net is the backend for
     * http://schemastore.org
     * technically you're not supposed to use it, but it supports HTTPS so I'm
     * using it anyway.
     */
    {
      "fileMatch": ["bower.json", ".bower.json"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/bower.json"
    },
    {
      "fileMatch": ["coffeelint.json"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/coffeelint.json"
    },
    {
      "fileMatch": ["compile_commands.json"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/compile-commands.json"
    },
    {
      "fileMatch": ["composer.json"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/composer.json"
    },
    {
      "fileMatch": [".csslintrc"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/csslintrc.json"
    },
    {
      "fileMatch": ["*.ipynb"],
      "url": "https://github.com/jupyter/nbformat/raw/master/nbformat/v4/nbformat.v4.schema.json"
    },
    {
      "fileMatch": ["package.json"],
      "url": "https://schemastore.azurewebsites.net/schemas/json/package.json"
    }
  ],
  "list.source.tags.command": "ptags", // ptags is faster than ctags but only works in git repos
  "npm.binPath": "yarnpkg",
  "prettier.semi": false,
  "prettier.singleQuote": true,
  "python.jediEnabled": false, // enable Microsoft Python LS
  "rust.clippy_preference": "on",
  "rust-client.disableRustup": true, // I don't use rustup
  "session.directory": "~/.local/share/nvim/sessions",
  "signature.target": "float",
  "snippets.ultisnips.directories": ["UltiSnips", "gosnippets/UltiSnips"], // vim-go support
  "suggest.labelMaxLength": 100,
  "vimlsp.suggest.fromRuntimepath": true, // vimlsp runs quickly enough for this to work fine I guess
  "xml.catalogs": ["/etc/xml/catalog"],
  "xml.java.home": "/usr/lib/jvm/jre", // Needs to point to a JRE
  "xml.server.workDir": "~/.cache/lsp4xml", // By default places random shit in home folder
  "yaml.format.enable": true,
  "yaml.format.singleQuote": true,
  "yaml.schemas": {
    "https://schemastore.azurewebsites.net/api/json/appveyor.json": "?(.)appveyor.yml",
    "https://schemastore.azurewebsites.net/api/json/circleciconfig.json": "/.circleci/config.yml",
    "https://schemastore.azurewebsites.net/api/json/cirrus.json": "/.cirrus.yml",
    "https://schemastore.azurewebsites.net/api/json/codecov.json": "?(.)codecov.yml",
    "https://schemastore.azurewebsites.net/api/json/eslintrc.json": ".eslintrc.yml",
    "https://schemastore.azurewebsites.net/api/json/gitlab-ci.json": "/.gitlab-ci.yml",
    "https://schemastore.azurewebsites.net/api/json/github-action.json": "/action.yml",
    "https://schemastore.azurewebsites.net/api/json/github-workflow.json": "/.github/workflows/**.yml",
    "https://schemastore.azurewebsites.net/api/json/travis.json": "/.travis.yml",
    "https://github.com/snapcore/snapcraft/raw/master/schema/snapcraft.json": "?(.)snapcraft.yaml"
  }
  // vim:ft=jsonc
}
