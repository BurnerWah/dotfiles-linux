{
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
      "rootPatterns": [".ccls", ".ccls-root", "compile_commands.json", ".git/"],
      "initializationOptions": {
        "cache": { "directory": ".ccls-cache" },
        "clang": { "resourceDir": "/usr/lib64/clang/11" },
        "highlight": { "lsRanges": true }
      }
    },
    "cmake": {
      "command": "cmake-language-server",
      "filetypes": ["cmake"],
      "rootPatterns": ["build/"],
      "initializationOptions": { "buildDirectory": "build" }
    },
    "dotls": {
      "command": "dot-language-server",
      "args": ["--stdio"],
      "filetypes": ["dot"]
    },
    "efm": {
      // Unfortunately, efm gets stuck with a somewhat useless name.
      "command": "efm-langserver",
      "filetypes": ["eruby", "gitcommit", "make"]
    },
    "fortls": {
      "command": "fortls",
      "filetypes": ["fortran"],
      "rootPatterns": [".fortls", ".git/"]
    },
    "gopls": {
      "command": "gopls",
      "filetypes": ["go"],
      "rootPatterns": ["go.mod", "Gopkg.toml"],
      "disableWorkspaceFolders": true,
      "initializationOptions": { "usePlaceholders": true }
    },
    "sumneko_lua": { "command": "lua-language-server", "filetypes": ["lua"] }
    // "lua": { "command": "lua-lsp", "filetypes": ["lua"] }
  },
  "coc.preferences.extensionUpdateCheck": "never",
  "coc.preferences.formatOnSaveFiletypes": [
    "cmake",
    "css",
    "html",
    "javascript",
    "json",
    "sh",
    "typescript",
    "yaml"
  ],
  "coc.preferences.hoverTarget": "float",
  "diagnostic.filetypeMap": { "markdown": "vimwiki" },
  "diagnostic-languageserver.linters": {
    /*
     * checkmake just generally doesn't work. It's unclear why.
     *
     * bash/zsh have errors that end up after the file so they're left to ALE.
     */
    "alex": {
      "sourceName": "alex",
      "command": "alex",
      "args": ["--", "%file"],
      "isStdout": false,
      "isStderr": true,
      "formatLines": 1,
      "formatPattern": [
        "^ *(\\d+):(\\d+)-(\\d+):(\\d+) +warning +(.+?)  +(.+?)  +(.+)$",
        { "line": 1, "column": 2, "endLine": 3, "endColumn": 4, "message": 5 }
      ],
      "securities": { "undefined": "warning" }
    },
    "alex_text": {
      "sourceName": "alex",
      "command": "alex",
      "args": ["--text", "--", "%file"],
      "isStdout": false,
      "isStderr": true,
      "formatLines": 1,
      "formatPattern": [
        "^ *(\\d+):(\\d+)-(\\d+):(\\d+) +warning +(.+?)  +(.+?)  +(.+)$",
        { "line": 1, "column": 2, "endLine": 3, "endColumn": 4, "message": 5 }
      ],
      "securities": { "undefined": "warning" }
    },
    "alex_html": {
      "sourceName": "alex",
      "command": "alex",
      "args": ["--html", "--", "%file"],
      "isStdout": false,
      "isStderr": true,
      "formatLines": 1,
      "formatPattern": [
        "^ *(\\d+):(\\d+)-(\\d+):(\\d+) +warning +(.+?)  +(.+?)  +(.+)$",
        { "line": 1, "column": 2, "endLine": 3, "endColumn": 4, "message": 5 }
      ],
      "securities": { "undefined": "warning" }
    },
    "cmakelint": {
      "sourceName": "cmakelint",
      "command": "cmakelint",
      "args": ["%file"],
      "isStdout": true,
      "isStderr": false,
      "offsetColumn": -1, // This limits messages to one line
      "formatLines": 1,
      "formatPattern": ["^.+?:(\\d+): (.*)$", { "line": 1, "message": [2] }],
      "securities": { "undefined": "warning" }
    },
    "fish": {
      "sourceName": "fish",
      "command": "fish",
      "args": ["-n", "%tempfile"], // using %tempfile lets us lint w/o saving the file
      "isStdout": false,
      "isStderr": true,
      "offsetColumn": -1, // This limits messages to one line
      "formatLines": 1,
      "formatPattern": [
        "^.*\\(line (\\d+)\\): (.*)$",
        { "line": 1, "message": 2 }
      ]
    },
    "gitlint": {
      // This has a weird issue where some lines just don't show up
      "sourceName": "gitlint",
      "command": "gitlint",
      "args": ["lint"],
      "isStdout": false,
      "isStderr": true,
      "offsetColumn": -1, // This limits messages to one line
      "formatLines": 1,
      "formatPattern": ["^(\\d+): (.*)$", { "line": 1, "message": [2] }]
    },
    "jshint": {
      "sourceName": "jshint",
      "command": "jshint",
      "args": [
        "--reporter",
        "unix",
        "--extract",
        "auto",
        "--filename",
        "%filepath",
        "-"
      ],
      "formatLines": 1,
      "formatPattern": [
        "^[^:]+:(\\d+):(\\d+): (.+)$",
        { "line": 1, "column": 2, "message": [3] }
      ],
      "securities": { "undefined": "warning" }
    },
    "jsonlint": {
      "sourceName": "jsonlint",
      "command": "jsonlint",
      "args": ["--compact", "-"],
      "isStdout": false,
      "isStderr": true,
      "formatLines": 1,
      "formatPattern": [
        "^line (\\d+), col (\\d+), (.*)$",
        { "line": 1, "column": 2, "message": [3] }
      ]
    },
    "luacheck": {
      "sourceName": "luacheck",
      "command": "luacheck",
      "args": ["--formatter", "plain", "--codes", "--ranges", "-", "-g", "-u"],
      "isStdout": true,
      "isStderr": false,
      "formatLines": 1,
      "formatPattern": [
        "^.+?:(\\d+):(\\d+)-(\\d+): (\\(([WE])\\d+\\) .*)$",
        {
          "line": 1,
          "column": 2,
          "endColumn": 3,
          "security": 5,
          "message": [4]
        }
      ],
      "securities": { "W": "warning", "error": "E" }
    },
    "rstcheck": {
      "sourceName": "rstcheck",
      "command": "rstcheck",
      "args": ["-"],
      "isStdout": false,
      "isStderr": true,
      "offsetColumn": -1, // This limits messages to one line
      "formatLines": 1,
      "formatPattern": [
        "^[^:]+:(\\d+): \\(.+?/(\\d)\\) (.*)$",
        { "line": 1, "security": 2, "message": [3] }
      ],
      "securities": { "1": "info", "2": "warning", "3": "error", "4": "error" }
    },
    "rst-lint": {
      "sourceName": "rst-lint",
      "command": "rst-lint",
      "args": ["--format", "json", "%file"],
      "offsetColumn": -1, // This limits messages to one line
      "parseJson": {
        "line": "line",
        "security": "level",
        "message": "${message}"
      },
      "securities": { "1": "info", "2": "warning", "3": "error", "4": "error" }
    },
    "vint": {
      "sourceName": "vint",
      "command": "vint",
      "args": ["--enable-neovim", "--json", "-"],
      "debounce": 100,
      "offsetLine": 0,
      "offsetColumn": 0,
      "parseJson": {
        "line": "line_number",
        "column": "column_number",
        "security": "severity",
        "message": "${description} [${policy_name}]"
      }
    },
    "xmllint": {
      "sourceName": "xmllint",
      "command": "xmllint",
      "args": ["--noout", "-"],
      "isStdout": false,
      "isStderr": true,
      "offsetColumn": -1,
      "formatPattern": [
        "^[^:]+:(\\d+):\\s*(([^:]+)\\s*:.*)$",
        { "line": 1, "security": 3, "message": [2] }
      ],
      "securities": { "warning": "warning" }
    },
    "write-good": {
      "command": "write-good",
      "debounce": 100,
      "args": ["%tempfile"],
      "offsetLine": 0,
      "offsetColumn": 1,
      "sourceName": "write-good",
      "formatLines": 1,
      "formatPattern": [
        "(.*)\\s+on\\s+line\\s+(\\d+)\\s+at\\s+column\\s+(\\d+)\\s*$",
        { "line": 2, "column": 3, "message": 1 }
      ],
      "securities": { "undefined": "hint" }
    }
  },
  "diagnostic-languageserver.filetypes": {
    "asciidoc": ["alex_text", "languagetool", "write-good"],
    "bats": "shellcheck",
    "c": "cpplint",
    "cmake": "cmakelint",
    "cpp": "cpplint",
    "css": "stylelint",
    "dockerfile": "hadolint",
    "Dockerfile": "hadolint",
    "elixir": "mix_credo",
    "fish": "fish",
    "gitcommit": "gitlint",
    // go - golangci-lint, revive disabled by default
    "graphql": "eslint",
    // haskell - hlint not available in coc-diagnostic
    // help - all linters disabled by default
    "html": ["alex_html", "tidy", "write-good"],
    "javascript": ["eslint", "jshint", "standard"],
    "json": ["jsonlint"],
    "less": "stylelint",
    "lua": "luacheck",
    "mail": ["alex_text", "languagetool"],
    "markdown": ["alex", "languagetool", "write-good"],
    "nroff": ["alex_text", "write-good"],
    "php": ["phpcs", "phpstan"], // psalm can be a language server
    "po": ["alex", "write-good"],
    "pod": ["alex", "write-good"],
    // python - pylint, mypy not available in coc-diagnostic
    "rst": ["alex_text", "rstcheck", "rst-lint", "write-good"],
    "sass": "stylelint",
    "scss": "stylelint",
    "sh": "shellcheck",
    "stylus": "stylelint",
    "sugarss": "stylelint",
    "tex": ["alex_text", "write-good"],
    "texinfo": ["alex_text", "write-good"],
    "text": "languagetool", // ALE only turns on languagetool by default
    "typescript": ["eslint", "standard"],
    "vim": "vint",
    "vimwiki": ["alex_text", "languagetool", "write-good"],
    "xhtml": ["alex_text", "write-good"],
    "xml": "xmllint",
    "yaml": "yamllint"
  },
  "diagnostic-languageserver.formatters": {
    // shfmt has annoying defaults so we override them
    "shfmt": { "command": "shfmt", "args": ["-i=2", "-ci"] },
    "cmakeformalt": { "command": "cmake-format" }
  },
  "diagnostic-languageserver.formatFiletypes": {
    // fish_indent has issues, don't use it.
    "cmake": "cmakeformat",
    "dart": "dartfmt",
    "elixir": "mix_format",
    "lua": "lua-format",
    "sh": "shfmt"
  },
  "highlight.colors.enable": false, // We have another plugin set up to handle this
  "highlight.disableLanguages": ["markdown"],
  "highlight.colorNames.enable": false,
  "json.schemas": [
    {
      "fileMatch": ["*.ipynb"],
      "url": "https://github.com/jupyter/nbformat/raw/master/nbformat/v4/nbformat.v4.schema.json"
    }
  ],
  "list.source.tags.command": "ptags", // ptags is faster than ctags but only works in git repos
  "prettier.semi": false,
  "prettier.singleQuote": true,
  "python.jediEnabled": false, // enable Microsoft Python LS
  "rust.clippy_preference": "on",
  "rust-client.disableRustup": true,
  "session.directory": "~/.local/share/nvim/sessions",
  "signature.target": "float",
  "suggest.labelMaxLength": 100,
  "vimlsp.suggest.fromRuntimepath": true, // vimlsp runs quickly enough for this to work fine I guess
  "xml.catalogs": ["/etc/xml/catalog"],
  "xml.java.home": "/usr/lib/jvm/jre", // Needs to point to a JRE
  "xml.server.workDir": "~/.cache/lsp4xml", // By default places random shit in home folder
  "yaml.format.enable": true,
  "yaml.format.singleQuote": true,
  "yaml.schemas": {
    "https://github.com/mattn/efm-langserver/raw/master/schema.json": "/.config/efm-langserver/config.yaml"
  }
  // vim:ft=jsonc
}
